name: Build and Deploy to Netlify

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
        
      - name: Run TypeScript check
        run: npx tsc --noEmit
        
      - name: Run security audit
        run: npm audit --audit-level=moderate

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: lint-and-test
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_APP_NAME: ${{ vars.VITE_APP_NAME || 'AAMS' }}
          VITE_APP_VERSION: ${{ github.sha }}
          VITE_APP_ENV: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
          VITE_API_BASE_URL: ${{ vars.VITE_API_BASE_URL }}
          VITE_PWA_NAME: ${{ vars.VITE_PWA_NAME || 'AAMS - Aircraft Management' }}
          VITE_PWA_DESCRIPTION: ${{ vars.VITE_PWA_DESCRIPTION || 'Comprehensive aircraft management system' }}
          VITE_ENABLE_OFFLINE_MODE: ${{ vars.VITE_ENABLE_OFFLINE_MODE || 'true' }}
          VITE_ENABLE_PWA: ${{ vars.VITE_ENABLE_PWA || 'true' }}
          VITE_ENABLE_ANALYTICS: ${{ vars.VITE_ENABLE_ANALYTICS || 'false' }}
          VITE_ENABLE_DEV_TOOLS: ${{ github.ref != 'refs/heads/main' && 'true' || 'false' }}
          VITE_LOG_LEVEL: ${{ github.ref == 'refs/heads/main' && 'error' || 'debug' }}
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist
          retention-days: 7
      
      - name: Deploy to Netlify (Production)
        if: github.ref == 'refs/heads/main'
        uses: netlify/actions/deploy@master
        with:
          publish-dir: ./dist
          production-deploy: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        
      - name: Deploy to Netlify (Preview)
        if: github.ref != 'refs/heads/main'
        uses: netlify/actions/deploy@master
        with:
          publish-dir: ./dist
          production-deploy: false
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        
      - name: Comment PR with preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Try to get deploy URL from Netlify output
            try {
              const deployUrl = process.env.DEPLOY_URL || 'https://deploy-preview-${{ github.event.number }}--your-site.netlify.app';
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `ðŸš€ **Preview deployed successfully!**\n\nðŸ“± **Preview URL:** ${deployUrl}\n\nâœ… Build completed at ${new Date().toISOString()}\n\n---\n*This preview will be automatically updated when you push new commits to this PR.*`
              });
            } catch (error) {
              console.log('Could not post comment:', error);
            }

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      continue-on-error: true
      
    - name: Check for high severity vulnerabilities
      run: |
        if npm audit --audit-level=high --json | jq -e '.metadata.vulnerabilities.high > 0 or .metadata.vulnerabilities.critical > 0'; then
          echo "High or critical vulnerabilities found!"
          exit 1
        fi
      continue-on-error: false
        run: |
          echo "Deployment failed. Initiating rollback..."
          curl -X POST -H "Authorization: Bearer ${{ secrets.NETLIFY_AUTH_TOKEN }}" \
            "https://api.netlify.com/api/v1/sites/${{ secrets.NETLIFY_SITE_ID }}/deploys/restore" \
            -d '{"deploy_id": "previous"}' || echo "Rollback failed or not needed"

  health-check:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Health check
        run: |
          sleep 30  # Wait for deployment to be fully available
          curl -f https://aams.netlify.app || exit 1
          echo "Health check passed"